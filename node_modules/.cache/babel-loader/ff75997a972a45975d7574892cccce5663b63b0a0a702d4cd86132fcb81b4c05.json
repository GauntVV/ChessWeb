{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vikaa\\\\WebstormProjects\\\\Chess\\\\src\\\\components\\\\BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CellComponent from \"./CellComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardComponent = _ref => {\n  _s();\n  let {\n    board,\n    setBoard,\n    currentPlayer,\n    swapPlayer\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  function click(cell) {\n    var _selectedCell$figure;\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      selectedCell.moveFigure(cell);\n      swapPlayer();\n      setSelectedCell(null);\n      updateBoard();\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  }\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n  function highlightCells() {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  }\n  function updateBoard() {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n          click: click,\n          cell: cell,\n          selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(BoardComponent, \"OFVjm5mk704+5WCzFQLJg89Ag6Q=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","jsxDEV","_jsxDEV","BoardComponent","_ref","_s","board","setBoard","currentPlayer","swapPlayer","selectedCell","setSelectedCell","click","cell","_selectedCell$figure","figure","canMove","moveFigure","updateBoard","_cell$figure","color","highlightCells","newBoard","getCopyBoard","children","fileName","_jsxFileName","lineNumber","columnNumber","className","cells","map","row","index","Fragment","selected","x","y","id","_c","$RefreshReg$"],"sources":["C:/Users/vikaa/WebstormProjects/Chess/src/components/BoardComponent.tsx"],"sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {Board} from \"../models/Board\";\r\nimport CellComponent from \"./CellComponent\";\r\nimport {Cell} from \"../models/Cell\";\r\nimport {Player} from \"../models/Player\";\r\n\r\ninterface BoardProps {\r\n    board: Board;\r\n    setBoard: (board: Board) => void;\r\n    currentPlayer: Player | null;\r\n    swapPlayer: () => void;\r\n}\r\n\r\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, currentPlayer, swapPlayer}) => {\r\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\r\n\r\n    function click(cell: Cell) {\r\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) {\r\n            selectedCell.moveFigure(cell);\r\n            swapPlayer()\r\n            setSelectedCell(null);\r\n            updateBoard()\r\n        } else {\r\n            if (cell.figure?.color === currentPlayer?.color) {\r\n                setSelectedCell(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        highlightCells()\r\n    }, [selectedCell])\r\n\r\n    function highlightCells() {\r\n        board.highlightCells(selectedCell)\r\n        updateBoard()\r\n    }\r\n\r\n    function updateBoard() {\r\n        const newBoard = board.getCopyBoard()\r\n        setBoard(newBoard)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Текущий игрок {currentPlayer?.color}</h3>\r\n            <div className=\"board\">\r\n                {board.cells.map((row, index) =>\r\n                    <React.Fragment key={index}>\r\n                        {row.map(cell =>\r\n                            <CellComponent\r\n                                click={click}\r\n                                cell={cell}\r\n                                key={cell.id}\r\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}