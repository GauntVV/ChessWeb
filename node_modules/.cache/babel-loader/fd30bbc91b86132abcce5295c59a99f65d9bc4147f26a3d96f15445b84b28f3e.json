{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { King } from \"./figures/King\";\nimport { Queen } from \"./figures/Queen\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { Knight } from \"./figures/Knight\";\nimport { Rook } from \"./figures/Rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null)); // Черные ячейки\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null)); // белые\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    return newBoard;\n  }\n  highlightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        var _selectedCell$figure;\n        const target = row[j];\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target));\n      }\n    }\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n\n  // public addFisherFigures() {\n  //\n  // }\n\n  addFigures() {\n    this.addPawns();\n    this.addKnights();\n    this.addKings();\n    this.addBishops();\n    this.addQueens();\n    this.addRooks();\n  }\n}","map":{"version":3,"names":["Cell","Colors","Pawn","King","Queen","Bishop","Knight","Rook","Board","constructor","cells","lostBlackFigures","lostWhiteFigures","initCells","i","row","j","push","BLACK","WHITE","getCopyBoard","newBoard","highlightCells","selectedCell","length","_selectedCell$figure","target","available","figure","canMove","getCell","x","y","addPawns","addKings","addQueens","addBishops","addKnights","addRooks","addFigures"],"sources":["C:/Users/vikaa/WebstormProjects/Chess/src/models/Board.ts"],"sourcesContent":["import {Cell} from \"./Cell\";\r\nimport {Colors} from \"./Colors\";\r\nimport {Pawn} from \"./figures/Pawn\";\r\nimport {King} from \"./figures/King\";\r\nimport {Queen} from \"./figures/Queen\";\r\nimport {Bishop} from \"./figures/Bishop\";\r\nimport {Knight} from \"./figures/Knight\";\r\nimport {Rook} from \"./figures/Rook\";\r\nimport {Figure} from \"./figures/Figure\";\r\n\r\nexport class Board {\r\n    cells: Cell[][] = []\r\n    lostBlackFigures: Figure[] = []\r\n    lostWhiteFigures: Figure[] = []\r\n\r\n    public initCells() {\r\n        for (let i = 0; i < 8; i++) {\r\n            const row: Cell[] = []\r\n            for (let j = 0; j < 8; j++) {\r\n                if ((i + j) % 2 !== 0) {\r\n                    row.push(new Cell(this, j, i, Colors.BLACK, null)) // Черные ячейки\r\n                } else {\r\n                    row.push(new Cell(this, j, i, Colors.WHITE, null)) // белые\r\n                }\r\n            }\r\n            this.cells.push(row);\r\n        }\r\n    }\r\n\r\n    public getCopyBoard(): Board {\r\n        const newBoard = new Board();\r\n        newBoard.cells = this.cells;\r\n        newBoard.lostWhiteFigures = this.lostWhiteFigures\r\n        newBoard.lostBlackFigures = this.lostBlackFigures\r\n        return newBoard;\r\n    }\r\n\r\n    public highlightCells(selectedCell: Cell | null) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            const row = this.cells[i];\r\n            for (let j = 0; j < row.length; j++) {\r\n                const target = row[j];\r\n                target.available = !!selectedCell?.figure?.canMove(target)\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCell(x: number, y: number) {\r\n        return this.cells[y][x]\r\n    }\r\n\r\n    private addPawns() {\r\n        for (let i = 0; i < 8; i++) {\r\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\r\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\r\n        }\r\n    }\r\n\r\n    private addKings() {\r\n        new King(Colors.BLACK, this.getCell(4, 0))\r\n        new King(Colors.WHITE, this.getCell(4, 7))\r\n    }\r\n\r\n    private addQueens() {\r\n        new Queen(Colors.BLACK, this.getCell(3, 0))\r\n        new Queen(Colors.WHITE, this.getCell(3, 7))\r\n    }\r\n\r\n    private addBishops() {\r\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\r\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\r\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\r\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\r\n    }\r\n\r\n    private addKnights() {\r\n        new Knight(Colors.BLACK, this.getCell(1, 0))\r\n        new Knight(Colors.BLACK, this.getCell(6, 0))\r\n        new Knight(Colors.WHITE, this.getCell(1, 7))\r\n        new Knight(Colors.WHITE, this.getCell(6, 7))\r\n    }\r\n\r\n    private addRooks() {\r\n        new Rook(Colors.BLACK, this.getCell(0, 0))\r\n        new Rook(Colors.BLACK, this.getCell(7, 0))\r\n        new Rook(Colors.WHITE, this.getCell(0, 7))\r\n        new Rook(Colors.WHITE, this.getCell(7, 7))\r\n    }\r\n\r\n    // public addFisherFigures() {\r\n    //\r\n    // }\r\n\r\n    public addFigures() {\r\n        this.addPawns()\r\n        this.addKnights()\r\n        this.addKings()\r\n        this.addBishops()\r\n        this.addQueens()\r\n        this.addRooks()\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,IAAI,QAAO,QAAQ;AAC3B,SAAQC,MAAM,QAAO,UAAU;AAC/B,SAAQC,IAAI,QAAO,gBAAgB;AACnC,SAAQC,IAAI,QAAO,gBAAgB;AACnC,SAAQC,KAAK,QAAO,iBAAiB;AACrC,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,IAAI,QAAO,gBAAgB;AAGnC,OAAO,MAAMC,KAAK,CAAC;EAAAC,YAAA;IAAA,KACfC,KAAK,GAAa,EAAE;IAAA,KACpBC,gBAAgB,GAAa,EAAE;IAAA,KAC/BC,gBAAgB,GAAa,EAAE;EAAA;EAExBC,SAASA,CAAA,EAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,MAAMC,GAAW,GAAG,EAAE;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxB,IAAI,CAACF,CAAC,GAAGE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;UACnBD,GAAG,CAACE,IAAI,CAAC,IAAIjB,IAAI,CAAC,IAAI,EAAEgB,CAAC,EAAEF,CAAC,EAAEb,MAAM,CAACiB,KAAK,EAAE,IAAI,CAAC,CAAC,EAAC;QACvD,CAAC,MAAM;UACHH,GAAG,CAACE,IAAI,CAAC,IAAIjB,IAAI,CAAC,IAAI,EAAEgB,CAAC,EAAEF,CAAC,EAAEb,MAAM,CAACkB,KAAK,EAAE,IAAI,CAAC,CAAC,EAAC;QACvD;MACJ;;MACA,IAAI,CAACT,KAAK,CAACO,IAAI,CAACF,GAAG,CAAC;IACxB;EACJ;EAEOK,YAAYA,CAAA,EAAU;IACzB,MAAMC,QAAQ,GAAG,IAAIb,KAAK,CAAC,CAAC;IAC5Ba,QAAQ,CAACX,KAAK,GAAG,IAAI,CAACA,KAAK;IAC3BW,QAAQ,CAACT,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IACjDS,QAAQ,CAACV,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IACjD,OAAOU,QAAQ;EACnB;EAEOC,cAAcA,CAACC,YAAyB,EAAE;IAC7C,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,KAAK,CAACc,MAAM,EAAEV,CAAC,EAAE,EAAE;MACxC,MAAMC,GAAG,GAAG,IAAI,CAACL,KAAK,CAACI,CAAC,CAAC;MACzB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACS,MAAM,EAAER,CAAC,EAAE,EAAE;QAAA,IAAAS,oBAAA;QACjC,MAAMC,MAAM,GAAGX,GAAG,CAACC,CAAC,CAAC;QACrBU,MAAM,CAACC,SAAS,GAAG,CAAC,EAACJ,YAAY,aAAZA,YAAY,gBAAAE,oBAAA,GAAZF,YAAY,CAAEK,MAAM,cAAAH,oBAAA,eAApBA,oBAAA,CAAsBI,OAAO,CAACH,MAAM,CAAC;MAC9D;IACJ;EACJ;EAEOI,OAAOA,CAACC,CAAS,EAAEC,CAAS,EAAE;IACjC,OAAO,IAAI,CAACtB,KAAK,CAACsB,CAAC,CAAC,CAACD,CAAC,CAAC;EAC3B;EAEQE,QAAQA,CAAA,EAAG;IACf,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,IAAIZ,IAAI,CAACD,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAChB,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1C,IAAIZ,IAAI,CAACD,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAChB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C;EACJ;EAEQoB,QAAQA,CAAA,EAAG;IACf,IAAI/B,IAAI,CAACF,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,IAAI3B,IAAI,CAACF,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C;EAEQK,SAASA,CAAA,EAAG;IAChB,IAAI/B,KAAK,CAACH,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,IAAI1B,KAAK,CAACH,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/C;EAEQM,UAAUA,CAAA,EAAG;IACjB,IAAI/B,MAAM,CAACJ,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIzB,MAAM,CAACJ,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIzB,MAAM,CAACJ,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIzB,MAAM,CAACJ,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD;EAEQO,UAAUA,CAAA,EAAG;IACjB,IAAI/B,MAAM,CAACL,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIxB,MAAM,CAACL,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIxB,MAAM,CAACL,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIxB,MAAM,CAACL,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD;EAEQQ,QAAQA,CAAA,EAAG;IACf,IAAI/B,IAAI,CAACN,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,IAAIvB,IAAI,CAACN,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,IAAIvB,IAAI,CAACN,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,IAAIvB,IAAI,CAACN,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C;;EAEA;EACA;EACA;;EAEOS,UAAUA,CAAA,EAAG;IAChB,IAAI,CAACN,QAAQ,CAAC,CAAC;IACf,IAAI,CAACI,UAAU,CAAC,CAAC;IACjB,IAAI,CAACH,QAAQ,CAAC,CAAC;IACf,IAAI,CAACE,UAAU,CAAC,CAAC;IACjB,IAAI,CAACD,SAAS,CAAC,CAAC;IAChB,IAAI,CAACG,QAAQ,CAAC,CAAC;EACnB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}