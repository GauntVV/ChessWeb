[{"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\index.tsx":"1","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\App.tsx":"2","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Colors.ts":"3","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Player.ts":"4","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Board.ts":"5","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\LostFigures.tsx":"6","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\BoardComponent.tsx":"7","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\Timer.tsx":"8","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Cell.ts":"9","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\CellComponent.tsx":"10","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Pawn.ts":"11","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\King.ts":"12","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Queen.ts":"13","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Knight.ts":"14","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Bishop.ts":"15","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Rook.ts":"16","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Figure.ts":"17"},{"size":194,"mtime":1686000415811,"results":"18","hashOfConfig":"19"},{"size":1814,"mtime":1686000415818,"results":"20","hashOfConfig":"19"},{"size":65,"mtime":1685962321201,"results":"21","hashOfConfig":"19"},{"size":154,"mtime":1685962333526,"results":"22","hashOfConfig":"19"},{"size":3137,"mtime":1685962298263,"results":"23","hashOfConfig":"19"},{"size":579,"mtime":1685962265548,"results":"24","hashOfConfig":"19"},{"size":2018,"mtime":1685962240063,"results":"25","hashOfConfig":"19"},{"size":1411,"mtime":1685962277213,"results":"26","hashOfConfig":"19"},{"size":2936,"mtime":1685962309976,"results":"27","hashOfConfig":"19"},{"size":702,"mtime":1685962251003,"results":"28","hashOfConfig":"19"},{"size":1402,"mtime":1685962894991,"results":"29","hashOfConfig":"19"},{"size":579,"mtime":1685962872131,"results":"30","hashOfConfig":"19"},{"size":807,"mtime":1685962905075,"results":"31","hashOfConfig":"19"},{"size":743,"mtime":1685962882367,"results":"32","hashOfConfig":"19"},{"size":662,"mtime":1685962847634,"results":"33","hashOfConfig":"19"},{"size":728,"mtime":1685962948938,"results":"34","hashOfConfig":"19"},{"size":977,"mtime":1685962860064,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n3mezi",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\index.tsx",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\App.tsx",["92","93","94"],[],"import {useEffect, useState} from 'react';\r\nimport \"./appStyle.css\";\r\nimport BoardComponent from \"./components/BoardComponent\";\r\nimport {Board} from \"./models/Board\";\r\nimport {Player} from \"./models/Player\";\r\nimport {Colors} from \"./models/Colors\";\r\nimport LostFigures from \"./components/LostFigures\";\r\nimport Timer from \"./components/Timer\";\r\n\r\nconst App = () => {\r\n    const [board, setBoard] = useState(new Board())\r\n    const [whitePlayer, setWhitePlayer] = useState(new Player(Colors.WHITE))\r\n    const [blackPlayer, setBlackPlayer] = useState(new Player(Colors.BLACK))\r\n    const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);\r\n\r\n    useEffect(() => {\r\n        restart()\r\n        setCurrentPlayer(whitePlayer);\r\n    }, [])\r\n\r\n    function restart() {\r\n        const newBoard = new Board();\r\n        newBoard.initCells()\r\n        newBoard.addFigures()\r\n        setBoard(newBoard)\r\n    }\r\n\r\n    function swapPlayer() {\r\n        setCurrentPlayer(currentPlayer?.color === Colors.WHITE ? blackPlayer : whitePlayer)\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Timer\r\n                restart={restart}\r\n                currentPlayer={currentPlayer}\r\n            />\r\n            <BoardComponent\r\n                board={board}\r\n                setBoard={setBoard}\r\n                currentPlayer={currentPlayer}\r\n                swapPlayer={swapPlayer}\r\n            />\r\n            <div>\r\n                <LostFigures\r\n                    title=\"Черные фигуры\"\r\n                    figures={board.lostBlackFigures}\r\n                />\r\n                <LostFigures\r\n                    title=\"Белые фигуры\"\r\n                    figures={board.lostWhiteFigures}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Colors.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Player.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Board.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\LostFigures.tsx",["95"],[],"import React, {FC} from 'react';\r\nimport {Figure} from \"../models/figures/Figure\";\r\n\r\ninterface LostFiguresProps {\r\n    title: string;\r\n    figures: Figure[]\r\n}\r\n\r\nconst LostFigures: FC<LostFiguresProps> = ({title, figures}) => {\r\n    return (\r\n        <div className=\"lost\">\r\n            <h3>{title}</h3>\r\n            {figures.map(figure =>\r\n                <div key={figure.id}>\r\n                    {figure.name} {figure.logo && <img width={20} height={20} src={figure.logo}/>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LostFigures;","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\BoardComponent.tsx",["96"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport {Board} from \"../models/Board\";\r\nimport CellComponent from \"./CellComponent\";\r\nimport {Cell} from \"../models/Cell\";\r\nimport {Player} from \"../models/Player\";\r\n\r\ninterface BoardProps {\r\n    board: Board;\r\n    setBoard: (board: Board) => void;\r\n    currentPlayer: Player | null;\r\n    swapPlayer: () => void;\r\n}\r\n\r\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, currentPlayer, swapPlayer}) => {\r\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\r\n\r\n    function click(cell: Cell) {\r\n        if (selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell)) {\r\n            selectedCell.moveFigure(cell);\r\n            swapPlayer()\r\n            setSelectedCell(null);\r\n            updateBoard()\r\n        } else {\r\n            if (cell.figure?.color === currentPlayer?.color) {\r\n                setSelectedCell(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        highlightCells()\r\n    }, [selectedCell])\r\n\r\n    function highlightCells() {\r\n        board.highlightCells(selectedCell)\r\n        updateBoard()\r\n    }\r\n\r\n    function updateBoard() {\r\n        const newBoard = board.getCopyBoard()\r\n        setBoard(newBoard)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Текущий игрок {currentPlayer?.color}</h3>\r\n            <div className=\"board\">\r\n                {board.cells.map((row, index) =>\r\n                    <React.Fragment key={index}>\r\n                        {row.map(cell =>\r\n                            <CellComponent\r\n                                click={click}\r\n                                cell={cell}\r\n                                key={cell.id}\r\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardComponent;","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\Timer.tsx",["97"],[],"import React, {FC, useEffect, useRef, useState} from 'react';\r\nimport {Player} from \"../models/Player\";\r\nimport {Colors} from \"../models/Colors\";\r\n\r\ninterface TimerProps {\r\n    currentPlayer: Player | null;\r\n    restart: () => void;\r\n}\r\n\r\nconst Timer: FC<TimerProps> = ({currentPlayer, restart}) => {\r\n    const [blackTime, setBlackTime] = useState(300)\r\n    const [whiteTime, setWhiteTime] = useState(300);\r\n    const timer = useRef<null | ReturnType<typeof setInterval>>(null)\r\n\r\n    useEffect(() => {\r\n        startTimer()\r\n    }, [currentPlayer])\r\n\r\n    function startTimer() {\r\n        if (timer.current) {\r\n            clearInterval(timer.current)\r\n        }\r\n        const callback = currentPlayer?.color === Colors.WHITE ? decrementWhiteTimer : decrementBlackTimer\r\n        timer.current = setInterval(callback, 1000)\r\n    }\r\n\r\n    function decrementBlackTimer() {\r\n        setBlackTime(prev => prev - 1)\r\n    }\r\n    function decrementWhiteTimer() {\r\n        setWhiteTime(prev => prev - 1)\r\n    }\r\n\r\n    const handleRestart = () => {\r\n        setWhiteTime(300)\r\n        setBlackTime(300)\r\n        restart()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={handleRestart}>Restart game</button>\r\n            </div>\r\n            <h2>Черные - {blackTime}</h2>\r\n            <h2>Белые - {whiteTime}</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Timer;","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\Cell.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\components\\CellComponent.tsx",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Pawn.ts",["98","99"],[],"import {Figure, FigureNames} from \"./Figure\";\r\nimport {Colors} from \"../Colors\";\r\nimport {Cell} from \"../Cell\";\r\nimport blackLogo from \"../../assets/black-pawn.png\";\r\nimport whiteLogo from \"../../assets/white-pawn.png\";\r\n\r\nexport class Pawn extends Figure {\r\n\r\n    isFirstStep: boolean = true;\r\n\r\n    constructor(color: Colors, cell: Cell) {\r\n        super(color, cell);\r\n        this.logo = color === Colors.BLACK ? blackLogo : whiteLogo;\r\n        this.name = FigureNames.PAWN;\r\n    }\r\n\r\n    canMove(target: Cell): boolean {\r\n        if(!super.canMove(target))\r\n            return false;\r\n        const direction = this.cell.figure?.color === Colors.BLACK ? 1 : -1\r\n        const firstStepDirection = this.cell.figure?.color === Colors.BLACK ? 2 : -2\r\n\r\n        if ((target.y === this.cell.y + direction || this.isFirstStep\r\n                && (target.y === this.cell.y + firstStepDirection))\r\n            && target.x === this.cell.x\r\n            && this.cell.board.getCell(target.x, target.y).isEmpty()) {\r\n            return true;\r\n        }\r\n\r\n        if(target.y === this.cell.y + direction\r\n            && (target.x === this.cell.x + 1 || target.x === this.cell.x - 1)\r\n            && this.cell.isEnemy(target)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    moveFigure(target: Cell) {\r\n        super.moveFigure(target);\r\n        this.isFirstStep = false;\r\n    }\r\n}","C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\King.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Queen.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Knight.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Bishop.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Rook.ts",[],[],"C:\\Users\\vikaa\\WebstormProjects\\Chess\\src\\models\\figures\\Figure.ts",[],[],{"ruleId":"100","severity":1,"message":"101","line":12,"column":25,"nodeType":"102","messageId":"103","endLine":12,"endColumn":39},{"ruleId":"100","severity":1,"message":"104","line":13,"column":25,"nodeType":"102","messageId":"103","endLine":13,"endColumn":39},{"ruleId":"105","severity":1,"message":"106","line":19,"column":8,"nodeType":"107","endLine":19,"endColumn":10,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":15,"column":51,"nodeType":"111","endLine":15,"endColumn":98},{"ruleId":"105","severity":1,"message":"112","line":32,"column":8,"nodeType":"107","endLine":32,"endColumn":22,"suggestions":"113"},{"ruleId":"105","severity":1,"message":"114","line":17,"column":8,"nodeType":"107","endLine":17,"endColumn":23,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":23,"column":51,"nodeType":"118","messageId":"119","endLine":23,"endColumn":53},{"ruleId":"116","severity":1,"message":"117","line":24,"column":17,"nodeType":"118","messageId":"119","endLine":24,"endColumn":19},"@typescript-eslint/no-unused-vars","'setWhitePlayer' is assigned a value but never used.","Identifier","unusedVar","'setBlackPlayer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'whitePlayer'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentPlayer' needs the current value of 'whitePlayer'.","ArrayExpression",["120"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'highlightCells'. Either include it or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'startTimer'. Either include it or remove the dependency array.",["122"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [whitePlayer]",{"range":"129","text":"130"},"Update the dependencies array to be: [highlightCells, selectedCell]",{"range":"131","text":"132"},"Update the dependencies array to be: [currentPlayer, startTimer]",{"range":"133","text":"134"},[745,747],"[whitePlayer]",[1014,1028],"[highlightCells, selectedCell]",[534,549],"[currentPlayer, startTimer]"]